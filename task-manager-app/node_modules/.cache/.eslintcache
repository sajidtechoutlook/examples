[{"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\index.js":"1","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\reportWebVitals.js":"2","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\App.js":"3","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\AddTask.js":"4","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Header.js":"5","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Tasks.js":"6","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Button.js":"7","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Task.js":"8"},{"size":500,"mtime":1639659770460,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1639659770460,"results":"11","hashOfConfig":"10"},{"size":4429,"mtime":1640846448563,"results":"12","hashOfConfig":"10"},{"size":1550,"mtime":1639989374424,"results":"13","hashOfConfig":"10"},{"size":435,"mtime":1639989510954,"results":"14","hashOfConfig":"10"},{"size":306,"mtime":1639989690455,"results":"15","hashOfConfig":"10"},{"size":175,"mtime":1639989450345,"results":"16","hashOfConfig":"10"},{"size":750,"mtime":1639989579249,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rzkbqd",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\index.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\App.js",["35"],"// Importing Components\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\n// Importing React Hooks\nimport { useState, useEffect } from 'react';\n// Importing Packages\nimport { v4 as uuidv4 } from 'uuid';\nimport Swal from \"sweetalert2\";\nfunction App() {\n    // All States\n    const [loading, setloading] = useState(true); // Pre-loader before page renders\n    const [tasks, setTasks] = useState([]); // Task State\n    const [showAddTask, setShowAddTask] = useState(false); // To reveal add task form\n    // Pre-loader\n    useEffect(() => {\n        setTimeout(() => {\n            setloading(false);\n        }, 1000);\n    }, [])\n    // Fetching from Local Storage\n    const getTasks = JSON.parse(localStorage.getItem(\"taskAdded\"));\n    useEffect(() => {\n        if (getTasks == null) {\n            setTasks([])\n        } else {\n            setTasks(getTasks);\n        }\n    }, [])\n    // Add Task\n    const addTask = (task) => {\n        const id = uuidv4();\n        const newTask = { id, ...task }\n        setTasks([...tasks, newTask]);\n        Swal.fire({\n            icon: 'success',\n            title: 'Yay...',\n            text: 'You have successfully added a new task!'\n        })\n        localStorage.setItem(\"taskAdded\", JSON.stringify([...tasks, newTask]));\n    }\n    // Delete Task\n    const deleteTask = (id) => {\n        const deleteTask = tasks.filter((task) => task.id !== id);\n        setTasks(deleteTask);\n        Swal.fire({\n            icon: 'success',\n            title: 'Oops...',\n            text: 'You have successfully deleted a task!'\n        })\n        localStorage.setItem(\"taskAdded\", JSON.stringify(deleteTask));\n    }\n    // Edit Task\n    const editTask = (id) => {\n        const text = prompt(\"Task Name\");\n        const day = prompt(\"Day and Time\");\n        let data = JSON.parse(localStorage.getItem('taskAdded'));\n        const myData = data.map(x => {\n            if (x.id === id) {\n                return {\n                    ...x,\n                    text: text,\n                    day: day,\n                    id: uuidv4()\n                }\n            }\n            return x;\n        })\n        Swal.fire({\n            icon: 'success',\n            title: 'Yay...',\n            text: 'You have successfully edited an existing task!'\n        })\n        localStorage.setItem(\"taskAdded\", JSON.stringify(myData));\n        window.location.reload();\n    }\n    return (\n        <>\n            {\n                loading ?\n                    <div className=\"spinnerContainer\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-secondary\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-success\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-danger\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                        <div className=\"spinner-grow text-warning\" role=\"status\">\n                            <span className=\"visually-hidden\">Loading...</span>\n                        </div>\n                    </div> :\n                    <div className=\"container\">\n                        {/* App Header that has open and App Name */}\n                        <Header showForm={() => setShowAddTask(!showAddTask)} changeTextAndColor={showAddTask} />\n                        {/* Revealing of Add Task Form */}\n                        {showAddTask && <AddTask onSave={addTask} />}\n                        {/* Task Counter */}\n                        <h3>Number of Tasks: {tasks.length}</h3>\n                        {/* Displaying of Tasks */}\n                        {\n                            tasks.length > 0 ?\n                                (<Tasks tasks={tasks} onDelete={deleteTask} onEdit={editTask} />) :\n                                ('No Task Found!')\n                        }\n                    </div>\n            }\n        </>\n    )\n}\nexport default App;","C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\AddTask.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Header.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Tasks.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Button.js",[],"C:\\xampp\\htdocs\\examples\\task-manager-app\\src\\components\\Task.js",[],{"ruleId":"36","severity":1,"message":"37","line":29,"column":8,"nodeType":"38","endLine":29,"endColumn":10,"suggestions":"39"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [getTasks]",{"range":"43","text":"44"},[949,951],"[getTasks]"]